// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PechkinNodeAddress.proto

package pro.fenenko.Pechkin;

public final class ProtobufNodeAddress {
  private ProtobufNodeAddress() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface NodeAddressOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 ID = 1;
    /**
     * <code>required int32 ID = 1;</code>
     */
    boolean hasID();
    /**
     * <code>required int32 ID = 1;</code>
     */
    int getID();

    // required int64 Time = 2;
    /**
     * <code>required int64 Time = 2;</code>
     */
    boolean hasTime();
    /**
     * <code>required int64 Time = 2;</code>
     */
    long getTime();

    // required string ip = 3;
    /**
     * <code>required string ip = 3;</code>
     */
    boolean hasIp();
    /**
     * <code>required string ip = 3;</code>
     */
    java.lang.String getIp();
    /**
     * <code>required string ip = 3;</code>
     */
    com.google.protobuf.ByteString
        getIpBytes();

    // required int32 port = 4;
    /**
     * <code>required int32 port = 4;</code>
     */
    boolean hasPort();
    /**
     * <code>required int32 port = 4;</code>
     */
    int getPort();

    // required int32 CountConnect = 5;
    /**
     * <code>required int32 CountConnect = 5;</code>
     */
    boolean hasCountConnect();
    /**
     * <code>required int32 CountConnect = 5;</code>
     */
    int getCountConnect();
  }
  /**
   * Protobuf type {@code pro.fenenko.Pechkin.NodeAddress}
   */
  public static final class NodeAddress extends
      com.google.protobuf.GeneratedMessage
      implements NodeAddressOrBuilder {
    // Use NodeAddress.newBuilder() to construct.
    private NodeAddress(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NodeAddress(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NodeAddress defaultInstance;
    public static NodeAddress getDefaultInstance() {
      return defaultInstance;
    }

    public NodeAddress getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NodeAddress(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              iD_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              time_ = input.readInt64();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              ip_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              port_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              countConnect_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pro.fenenko.Pechkin.ProtobufNodeAddress.internal_static_pro_fenenko_Pechkin_NodeAddress_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pro.fenenko.Pechkin.ProtobufNodeAddress.internal_static_pro_fenenko_Pechkin_NodeAddress_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.class, pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.Builder.class);
    }

    public static com.google.protobuf.Parser<NodeAddress> PARSER =
        new com.google.protobuf.AbstractParser<NodeAddress>() {
      public NodeAddress parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NodeAddress(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NodeAddress> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 ID = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int iD_;
    /**
     * <code>required int32 ID = 1;</code>
     */
    public boolean hasID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 ID = 1;</code>
     */
    public int getID() {
      return iD_;
    }

    // required int64 Time = 2;
    public static final int TIME_FIELD_NUMBER = 2;
    private long time_;
    /**
     * <code>required int64 Time = 2;</code>
     */
    public boolean hasTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int64 Time = 2;</code>
     */
    public long getTime() {
      return time_;
    }

    // required string ip = 3;
    public static final int IP_FIELD_NUMBER = 3;
    private java.lang.Object ip_;
    /**
     * <code>required string ip = 3;</code>
     */
    public boolean hasIp() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required string ip = 3;</code>
     */
    public java.lang.String getIp() {
      java.lang.Object ref = ip_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          ip_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string ip = 3;</code>
     */
    public com.google.protobuf.ByteString
        getIpBytes() {
      java.lang.Object ref = ip_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ip_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required int32 port = 4;
    public static final int PORT_FIELD_NUMBER = 4;
    private int port_;
    /**
     * <code>required int32 port = 4;</code>
     */
    public boolean hasPort() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 port = 4;</code>
     */
    public int getPort() {
      return port_;
    }

    // required int32 CountConnect = 5;
    public static final int COUNTCONNECT_FIELD_NUMBER = 5;
    private int countConnect_;
    /**
     * <code>required int32 CountConnect = 5;</code>
     */
    public boolean hasCountConnect() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 CountConnect = 5;</code>
     */
    public int getCountConnect() {
      return countConnect_;
    }

    private void initFields() {
      iD_ = 0;
      time_ = 0L;
      ip_ = "";
      port_ = 0;
      countConnect_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPort()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCountConnect()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, iD_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, time_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getIpBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, port_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, countConnect_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, iD_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, time_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getIpBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, port_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, countConnect_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pro.fenenko.Pechkin.NodeAddress}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddressOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.fenenko.Pechkin.ProtobufNodeAddress.internal_static_pro_fenenko_Pechkin_NodeAddress_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.fenenko.Pechkin.ProtobufNodeAddress.internal_static_pro_fenenko_Pechkin_NodeAddress_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.class, pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.Builder.class);
      }

      // Construct using pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        iD_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        time_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        ip_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        port_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        countConnect_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pro.fenenko.Pechkin.ProtobufNodeAddress.internal_static_pro_fenenko_Pechkin_NodeAddress_descriptor;
      }

      public pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress getDefaultInstanceForType() {
        return pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.getDefaultInstance();
      }

      public pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress build() {
        pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress buildPartial() {
        pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress result = new pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.iD_ = iD_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.time_ = time_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.ip_ = ip_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.port_ = port_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.countConnect_ = countConnect_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress) {
          return mergeFrom((pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress other) {
        if (other == pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.getDefaultInstance()) return this;
        if (other.hasID()) {
          setID(other.getID());
        }
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        if (other.hasIp()) {
          bitField0_ |= 0x00000004;
          ip_ = other.ip_;
          onChanged();
        }
        if (other.hasPort()) {
          setPort(other.getPort());
        }
        if (other.hasCountConnect()) {
          setCountConnect(other.getCountConnect());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasID()) {
          
          return false;
        }
        if (!hasTime()) {
          
          return false;
        }
        if (!hasIp()) {
          
          return false;
        }
        if (!hasPort()) {
          
          return false;
        }
        if (!hasCountConnect()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 ID = 1;
      private int iD_ ;
      /**
       * <code>required int32 ID = 1;</code>
       */
      public boolean hasID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 ID = 1;</code>
       */
      public int getID() {
        return iD_;
      }
      /**
       * <code>required int32 ID = 1;</code>
       */
      public Builder setID(int value) {
        bitField0_ |= 0x00000001;
        iD_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 ID = 1;</code>
       */
      public Builder clearID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        iD_ = 0;
        onChanged();
        return this;
      }

      // required int64 Time = 2;
      private long time_ ;
      /**
       * <code>required int64 Time = 2;</code>
       */
      public boolean hasTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int64 Time = 2;</code>
       */
      public long getTime() {
        return time_;
      }
      /**
       * <code>required int64 Time = 2;</code>
       */
      public Builder setTime(long value) {
        bitField0_ |= 0x00000002;
        time_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 Time = 2;</code>
       */
      public Builder clearTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        time_ = 0L;
        onChanged();
        return this;
      }

      // required string ip = 3;
      private java.lang.Object ip_ = "";
      /**
       * <code>required string ip = 3;</code>
       */
      public boolean hasIp() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required string ip = 3;</code>
       */
      public java.lang.String getIp() {
        java.lang.Object ref = ip_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          ip_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string ip = 3;</code>
       */
      public com.google.protobuf.ByteString
          getIpBytes() {
        java.lang.Object ref = ip_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ip_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string ip = 3;</code>
       */
      public Builder setIp(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        ip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string ip = 3;</code>
       */
      public Builder clearIp() {
        bitField0_ = (bitField0_ & ~0x00000004);
        ip_ = getDefaultInstance().getIp();
        onChanged();
        return this;
      }
      /**
       * <code>required string ip = 3;</code>
       */
      public Builder setIpBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        ip_ = value;
        onChanged();
        return this;
      }

      // required int32 port = 4;
      private int port_ ;
      /**
       * <code>required int32 port = 4;</code>
       */
      public boolean hasPort() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 port = 4;</code>
       */
      public int getPort() {
        return port_;
      }
      /**
       * <code>required int32 port = 4;</code>
       */
      public Builder setPort(int value) {
        bitField0_ |= 0x00000008;
        port_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 port = 4;</code>
       */
      public Builder clearPort() {
        bitField0_ = (bitField0_ & ~0x00000008);
        port_ = 0;
        onChanged();
        return this;
      }

      // required int32 CountConnect = 5;
      private int countConnect_ ;
      /**
       * <code>required int32 CountConnect = 5;</code>
       */
      public boolean hasCountConnect() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 CountConnect = 5;</code>
       */
      public int getCountConnect() {
        return countConnect_;
      }
      /**
       * <code>required int32 CountConnect = 5;</code>
       */
      public Builder setCountConnect(int value) {
        bitField0_ |= 0x00000010;
        countConnect_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 CountConnect = 5;</code>
       */
      public Builder clearCountConnect() {
        bitField0_ = (bitField0_ & ~0x00000010);
        countConnect_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pro.fenenko.Pechkin.NodeAddress)
    }

    static {
      defaultInstance = new NodeAddress(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pro.fenenko.Pechkin.NodeAddress)
  }

  public interface NodeAddressesOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 oldId = 1;
    /**
     * <code>required int32 oldId = 1;</code>
     */
    boolean hasOldId();
    /**
     * <code>required int32 oldId = 1;</code>
     */
    int getOldId();

    // repeated .pro.fenenko.Pechkin.NodeAddress address = 2;
    /**
     * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
     */
    java.util.List<pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress> 
        getAddressList();
    /**
     * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
     */
    pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress getAddress(int index);
    /**
     * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
     */
    int getAddressCount();
    /**
     * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
     */
    java.util.List<? extends pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddressOrBuilder> 
        getAddressOrBuilderList();
    /**
     * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
     */
    pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddressOrBuilder getAddressOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code pro.fenenko.Pechkin.NodeAddresses}
   */
  public static final class NodeAddresses extends
      com.google.protobuf.GeneratedMessage
      implements NodeAddressesOrBuilder {
    // Use NodeAddresses.newBuilder() to construct.
    private NodeAddresses(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NodeAddresses(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NodeAddresses defaultInstance;
    public static NodeAddresses getDefaultInstance() {
      return defaultInstance;
    }

    public NodeAddresses getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NodeAddresses(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              oldId_ = input.readInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                address_ = new java.util.ArrayList<pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress>();
                mutable_bitField0_ |= 0x00000002;
              }
              address_.add(input.readMessage(pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          address_ = java.util.Collections.unmodifiableList(address_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pro.fenenko.Pechkin.ProtobufNodeAddress.internal_static_pro_fenenko_Pechkin_NodeAddresses_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pro.fenenko.Pechkin.ProtobufNodeAddress.internal_static_pro_fenenko_Pechkin_NodeAddresses_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses.class, pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses.Builder.class);
    }

    public static com.google.protobuf.Parser<NodeAddresses> PARSER =
        new com.google.protobuf.AbstractParser<NodeAddresses>() {
      public NodeAddresses parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NodeAddresses(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NodeAddresses> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 oldId = 1;
    public static final int OLDID_FIELD_NUMBER = 1;
    private int oldId_;
    /**
     * <code>required int32 oldId = 1;</code>
     */
    public boolean hasOldId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 oldId = 1;</code>
     */
    public int getOldId() {
      return oldId_;
    }

    // repeated .pro.fenenko.Pechkin.NodeAddress address = 2;
    public static final int ADDRESS_FIELD_NUMBER = 2;
    private java.util.List<pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress> address_;
    /**
     * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
     */
    public java.util.List<pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress> getAddressList() {
      return address_;
    }
    /**
     * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
     */
    public java.util.List<? extends pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddressOrBuilder> 
        getAddressOrBuilderList() {
      return address_;
    }
    /**
     * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
     */
    public int getAddressCount() {
      return address_.size();
    }
    /**
     * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
     */
    public pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress getAddress(int index) {
      return address_.get(index);
    }
    /**
     * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
     */
    public pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddressOrBuilder getAddressOrBuilder(
        int index) {
      return address_.get(index);
    }

    private void initFields() {
      oldId_ = 0;
      address_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasOldId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getAddressCount(); i++) {
        if (!getAddress(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, oldId_);
      }
      for (int i = 0; i < address_.size(); i++) {
        output.writeMessage(2, address_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, oldId_);
      }
      for (int i = 0; i < address_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, address_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pro.fenenko.Pechkin.NodeAddresses}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddressesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.fenenko.Pechkin.ProtobufNodeAddress.internal_static_pro_fenenko_Pechkin_NodeAddresses_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.fenenko.Pechkin.ProtobufNodeAddress.internal_static_pro_fenenko_Pechkin_NodeAddresses_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses.class, pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses.Builder.class);
      }

      // Construct using pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getAddressFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        oldId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (addressBuilder_ == null) {
          address_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          addressBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pro.fenenko.Pechkin.ProtobufNodeAddress.internal_static_pro_fenenko_Pechkin_NodeAddresses_descriptor;
      }

      public pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses getDefaultInstanceForType() {
        return pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses.getDefaultInstance();
      }

      public pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses build() {
        pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses buildPartial() {
        pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses result = new pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.oldId_ = oldId_;
        if (addressBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            address_ = java.util.Collections.unmodifiableList(address_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.address_ = address_;
        } else {
          result.address_ = addressBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses) {
          return mergeFrom((pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses other) {
        if (other == pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses.getDefaultInstance()) return this;
        if (other.hasOldId()) {
          setOldId(other.getOldId());
        }
        if (addressBuilder_ == null) {
          if (!other.address_.isEmpty()) {
            if (address_.isEmpty()) {
              address_ = other.address_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureAddressIsMutable();
              address_.addAll(other.address_);
            }
            onChanged();
          }
        } else {
          if (!other.address_.isEmpty()) {
            if (addressBuilder_.isEmpty()) {
              addressBuilder_.dispose();
              addressBuilder_ = null;
              address_ = other.address_;
              bitField0_ = (bitField0_ & ~0x00000002);
              addressBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAddressFieldBuilder() : null;
            } else {
              addressBuilder_.addAllMessages(other.address_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasOldId()) {
          
          return false;
        }
        for (int i = 0; i < getAddressCount(); i++) {
          if (!getAddress(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddresses) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 oldId = 1;
      private int oldId_ ;
      /**
       * <code>required int32 oldId = 1;</code>
       */
      public boolean hasOldId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 oldId = 1;</code>
       */
      public int getOldId() {
        return oldId_;
      }
      /**
       * <code>required int32 oldId = 1;</code>
       */
      public Builder setOldId(int value) {
        bitField0_ |= 0x00000001;
        oldId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 oldId = 1;</code>
       */
      public Builder clearOldId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        oldId_ = 0;
        onChanged();
        return this;
      }

      // repeated .pro.fenenko.Pechkin.NodeAddress address = 2;
      private java.util.List<pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress> address_ =
        java.util.Collections.emptyList();
      private void ensureAddressIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          address_ = new java.util.ArrayList<pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress>(address_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress, pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.Builder, pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddressOrBuilder> addressBuilder_;

      /**
       * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
       */
      public java.util.List<pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress> getAddressList() {
        if (addressBuilder_ == null) {
          return java.util.Collections.unmodifiableList(address_);
        } else {
          return addressBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
       */
      public int getAddressCount() {
        if (addressBuilder_ == null) {
          return address_.size();
        } else {
          return addressBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
       */
      public pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress getAddress(int index) {
        if (addressBuilder_ == null) {
          return address_.get(index);
        } else {
          return addressBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
       */
      public Builder setAddress(
          int index, pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress value) {
        if (addressBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAddressIsMutable();
          address_.set(index, value);
          onChanged();
        } else {
          addressBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
       */
      public Builder setAddress(
          int index, pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.Builder builderForValue) {
        if (addressBuilder_ == null) {
          ensureAddressIsMutable();
          address_.set(index, builderForValue.build());
          onChanged();
        } else {
          addressBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
       */
      public Builder addAddress(pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress value) {
        if (addressBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAddressIsMutable();
          address_.add(value);
          onChanged();
        } else {
          addressBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
       */
      public Builder addAddress(
          int index, pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress value) {
        if (addressBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAddressIsMutable();
          address_.add(index, value);
          onChanged();
        } else {
          addressBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
       */
      public Builder addAddress(
          pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.Builder builderForValue) {
        if (addressBuilder_ == null) {
          ensureAddressIsMutable();
          address_.add(builderForValue.build());
          onChanged();
        } else {
          addressBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
       */
      public Builder addAddress(
          int index, pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.Builder builderForValue) {
        if (addressBuilder_ == null) {
          ensureAddressIsMutable();
          address_.add(index, builderForValue.build());
          onChanged();
        } else {
          addressBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
       */
      public Builder addAllAddress(
          java.lang.Iterable<? extends pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress> values) {
        if (addressBuilder_ == null) {
          ensureAddressIsMutable();
          super.addAll(values, address_);
          onChanged();
        } else {
          addressBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
       */
      public Builder clearAddress() {
        if (addressBuilder_ == null) {
          address_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          addressBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
       */
      public Builder removeAddress(int index) {
        if (addressBuilder_ == null) {
          ensureAddressIsMutable();
          address_.remove(index);
          onChanged();
        } else {
          addressBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
       */
      public pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.Builder getAddressBuilder(
          int index) {
        return getAddressFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
       */
      public pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddressOrBuilder getAddressOrBuilder(
          int index) {
        if (addressBuilder_ == null) {
          return address_.get(index);  } else {
          return addressBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
       */
      public java.util.List<? extends pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddressOrBuilder> 
           getAddressOrBuilderList() {
        if (addressBuilder_ != null) {
          return addressBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(address_);
        }
      }
      /**
       * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
       */
      public pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.Builder addAddressBuilder() {
        return getAddressFieldBuilder().addBuilder(
            pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
       */
      public pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.Builder addAddressBuilder(
          int index) {
        return getAddressFieldBuilder().addBuilder(
            index, pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.fenenko.Pechkin.NodeAddress address = 2;</code>
       */
      public java.util.List<pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.Builder> 
           getAddressBuilderList() {
        return getAddressFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress, pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.Builder, pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddressOrBuilder> 
          getAddressFieldBuilder() {
        if (addressBuilder_ == null) {
          addressBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress, pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddress.Builder, pro.fenenko.Pechkin.ProtobufNodeAddress.NodeAddressOrBuilder>(
                  address_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          address_ = null;
        }
        return addressBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:pro.fenenko.Pechkin.NodeAddresses)
    }

    static {
      defaultInstance = new NodeAddresses(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pro.fenenko.Pechkin.NodeAddresses)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_fenenko_Pechkin_NodeAddress_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_fenenko_Pechkin_NodeAddress_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_fenenko_Pechkin_NodeAddresses_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_fenenko_Pechkin_NodeAddresses_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\030PechkinNodeAddress.proto\022\023pro.fenenko." +
      "Pechkin\"W\n\013NodeAddress\022\n\n\002ID\030\001 \002(\005\022\014\n\004Ti" +
      "me\030\002 \002(\003\022\n\n\002ip\030\003 \002(\t\022\014\n\004port\030\004 \002(\005\022\024\n\014Co" +
      "untConnect\030\005 \002(\005\"Q\n\rNodeAddresses\022\r\n\005old" +
      "Id\030\001 \002(\005\0221\n\007address\030\002 \003(\0132 .pro.fenenko." +
      "Pechkin.NodeAddressB\025B\023ProtobufNodeAddre" +
      "ss"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_pro_fenenko_Pechkin_NodeAddress_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_pro_fenenko_Pechkin_NodeAddress_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pro_fenenko_Pechkin_NodeAddress_descriptor,
              new java.lang.String[] { "ID", "Time", "Ip", "Port", "CountConnect", });
          internal_static_pro_fenenko_Pechkin_NodeAddresses_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_pro_fenenko_Pechkin_NodeAddresses_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pro_fenenko_Pechkin_NodeAddresses_descriptor,
              new java.lang.String[] { "OldId", "Address", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
